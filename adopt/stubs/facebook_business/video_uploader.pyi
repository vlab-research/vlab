import abc
from _typeshed import Incomplete
from abc import ABCMeta, abstractmethod
from facebook_business.exceptions import FacebookError as FacebookError, FacebookRequestError as FacebookRequestError

class VideoUploader:
    def __init__(self) -> None: ...
    def upload(self, video, wait_for_encoding: bool = False): ...

class VideoUploadSession:
    def __init__(self, video, wait_for_encoding: bool = False, interval: int = 3, timeout: int = 180) -> None: ...
    def start(self): ...
    def getStartRequestContext(self): ...
    def getTransferRequestContext(self): ...
    def getFinishRequestContext(self): ...

class VideoUploadRequestManager(metaclass=abc.ABCMeta):
    __metaclass__ = ABCMeta
    def __init__(self, api) -> None: ...
    @abstractmethod
    def send_request(self, context): ...
    @abstractmethod
    def getParamsFromContext(self, context): ...

class VideoUploadStartRequestManager(VideoUploadRequestManager):
    def send_request(self, context): ...
    def getParamsFromContext(self, context): ...

class VideoUploadTransferRequestManager(VideoUploadRequestManager):
    def send_request(self, context): ...
    def getParamsFromContext(self, context): ...

class VideoUploadFinishRequestManager(VideoUploadRequestManager):
    def send_request(self, context): ...
    def getParamsFromContext(self, context): ...

class VideoUploadRequestContext:
    @property
    def account_id(self): ...
    @account_id.setter
    def account_id(self, account_id) -> None: ...
    @property
    def file_name(self): ...
    @file_name.setter
    def file_name(self, name) -> None: ...
    @property
    def file_size(self): ...
    @file_size.setter
    def file_size(self, size) -> None: ...
    @property
    def session_id(self): ...
    @session_id.setter
    def session_id(self, session_id) -> None: ...
    @property
    def start_offset(self): ...
    @start_offset.setter
    def start_offset(self, start_offset) -> None: ...
    @property
    def end_offset(self): ...
    @end_offset.setter
    def end_offset(self, end_offset) -> None: ...
    @property
    def file(self): ...
    @file.setter
    def file(self, file) -> None: ...
    @property
    def file_path(self): ...
    @file_path.setter
    def file_path(self, filepath) -> None: ...

class VideoUploadRequest:
    def __init__(self, api) -> None: ...
    def send(self, path): ...
    def setParams(self, params, files: Incomplete | None = None) -> None: ...

class VideoEncodingStatusChecker:
    @staticmethod
    def waitUntilReady(api, video_id, interval, timeout) -> None: ...
    @staticmethod
    def getStatus(api, video_id): ...
