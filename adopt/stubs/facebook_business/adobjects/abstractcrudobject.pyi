from _typeshed import Incomplete
from facebook_business.adobjects.abstractobject import AbstractObject as AbstractObject
from facebook_business.adobjects.objectparser import ObjectParser as ObjectParser
from facebook_business.api import Cursor as Cursor, FacebookAdsApi as FacebookAdsApi, FacebookRequest as FacebookRequest
from facebook_business.exceptions import FacebookBadObjectError as FacebookBadObjectError

class AbstractCrudObject(AbstractObject):
    def __init__(self, fbid: Incomplete | None = None, parent_id: Incomplete | None = None, api: Incomplete | None = None) -> None: ...
    def __setitem__(self, key, value) -> None: ...
    def __delitem__(self, key) -> None: ...
    def __eq__(self, other): ...
    def __ne__(self, other): ...
    @classmethod
    def get_by_ids(cls, ids, params: Incomplete | None = None, fields: Incomplete | None = None, api: Incomplete | None = None): ...
    def get_id(self): ...
    def get_parent_id(self): ...
    def get_api(self): ...
    def get_id_assured(self): ...
    def get_parent_id_assured(self): ...
    def get_api_assured(self): ...
    def export_changed_data(self): ...
    def export_data(self): ...
    def clear_id(self): ...
    def get_node_path(self): ...
    def get_node_path_string(self): ...
    def remote_create(self, batch: Incomplete | None = None, failure: Incomplete | None = None, files: Incomplete | None = None, params: Incomplete | None = None, success: Incomplete | None = None, api_version: Incomplete | None = None): ...
    def remote_read(self, batch: Incomplete | None = None, failure: Incomplete | None = None, fields: Incomplete | None = None, params: Incomplete | None = None, success: Incomplete | None = None, api_version: Incomplete | None = None): ...
    def remote_update(self, batch: Incomplete | None = None, failure: Incomplete | None = None, files: Incomplete | None = None, params: Incomplete | None = None, success: Incomplete | None = None, api_version: Incomplete | None = None): ...
    def remote_delete(self, batch: Incomplete | None = None, failure: Incomplete | None = None, params: Incomplete | None = None, success: Incomplete | None = None, api_version: Incomplete | None = None): ...
    def remote_save(self, *args, **kwargs): ...
    def remote_archive(self, batch: Incomplete | None = None, failure: Incomplete | None = None, success: Incomplete | None = None): ...
    save = remote_save
    def iterate_edge(self, target_objects_class, fields: Incomplete | None = None, params: Incomplete | None = None, fetch_first_page: bool = True, include_summary: bool = True, endpoint: Incomplete | None = None): ...
    def iterate_edge_async(self, target_objects_class, fields: Incomplete | None = None, params: Incomplete | None = None, is_async: bool = False, include_summary: bool = True, endpoint: Incomplete | None = None): ...
    def edge_object(self, target_objects_class, fields: Incomplete | None = None, params: Incomplete | None = None, endpoint: Incomplete | None = None): ...
    def assure_call(self) -> None: ...
