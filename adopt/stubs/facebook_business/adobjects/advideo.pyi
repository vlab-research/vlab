from _typeshed import Incomplete
from facebook_business.adobjects.abstractcrudobject import AbstractCrudObject as AbstractCrudObject
from facebook_business.adobjects.abstractobject import AbstractObject as AbstractObject
from facebook_business.adobjects.objectparser import ObjectParser as ObjectParser
from facebook_business.api import FacebookRequest as FacebookRequest
from facebook_business.typechecker import TypeChecker as TypeChecker

class AdVideo(AbstractCrudObject):
    def __init__(self, fbid: Incomplete | None = None, parent_id: Incomplete | None = None, api: Incomplete | None = None) -> None: ...
    class Field(AbstractObject.Field):
        ad_breaks: str
        admin_creator: str
        audio_isrc: str
        backdated_time: str
        backdated_time_granularity: str
        content_category: str
        content_tags: str
        copyright: str
        copyright_check_information: str
        copyright_monitoring_status: str
        created_time: str
        custom_labels: str
        description: str
        embed_html: str
        embeddable: str
        event: str
        expiration: str
        format: str
        field_from: str
        icon: str
        id: str
        is_crosspost_video: str
        is_crossposting_eligible: str
        is_episode: str
        is_instagram_eligible: str
        is_reference_only: str
        length: str
        live_audience_count: str
        live_status: str
        music_video_copyright: str
        permalink_url: str
        picture: str
        place: str
        post_id: str
        post_views: str
        premiere_living_room_status: str
        privacy: str
        published: str
        scheduled_publish_time: str
        source: str
        spherical: str
        status: str
        title: str
        universal_video_id: str
        updated_time: str
        views: str
        animated_effect_id: str
        application_id: str
        asked_fun_fact_prompt_id: str
        audio_story_wave_animation_handle: str
        chunk_session_id: str
        composer_entry_picker: str
        composer_entry_point: str
        composer_entry_time: str
        composer_session_events_log: str
        composer_session_id: str
        composer_source_surface: str
        composer_type: str
        container_type: str
        creative_tools: str
        end_offset: str
        fbuploader_video_file_chunk: str
        file_size: str
        file_url: str
        fisheye_video_cropped: str
        formatting: str
        fov: str
        front_z_rotation: str
        fun_fact_prompt_id: str
        fun_fact_toastee_id: str
        guide: str
        guide_enabled: str
        holiday_card: str
        initial_heading: str
        initial_pitch: str
        instant_game_entry_point_data: str
        is_boost_intended: str
        is_group_linking_post: str
        is_voice_clip: str
        location_source_id: str
        name: str
        offer_like_post_id: str
        og_action_type_id: str
        og_icon_id: str
        og_object_id: str
        og_phrase: str
        og_suggestion_mechanism: str
        original_fov: str
        original_projection_type: str
        publish_event_id: str
        referenced_sticker_id: str
        replace_video_id: str
        slideshow_spec: str
        source_instagram_media_id: str
        start_offset: str
        swap_mode: str
        text_format_metadata: str
        throwback_camera_roll_media: str
        thumb: str
        time_since_original_post: str
        transcode_setting_properties: str
        unpublished_content_type: str
        upload_phase: str
        upload_session_id: str
        upload_setting_properties: str
        video_file_chunk: str
        video_id_original: str
        video_start_time_ms: str
        waterfall_id: str
        ad_placements_validation_only: str
        creative_folder_id: str
        validation_ad_placements: str
        filename: str
        filepath: str
    class ContainerType:
        aco_autoextracted_video: str
        aco_video_variation: str
        ads_ai_generated: str
        ad_break_preview: str
        ad_derivative: str
        ad_library_watermark: str
        age_up: str
        album_multimedia_post: str
        aloha_call_video: str
        aloha_superframe: str
        app_rereview_screencast: str
        app_review_screencast: str
        asset_manager: str
        atlas_video: str
        audio_brief: str
        audio_broadcast: str
        audio_comment: str
        broadcast: str
        bulletin_article_audio: str
        canvas: str
        cfc_video: str
        cms_media_manager: str
        contained_post_attachment: str
        contained_post_audio_broadcast: str
        contained_post_copyright_reference_broadcast: str
        copyright_reference_broadcast: str
        copyright_reference_ig_xpost_video: str
        copyright_reference_video: str
        creation_ml_precreation: str
        datagenix_video: str
        dco_ad_asset_feed: str
        dco_autogen_video: str
        dco_trimmed_video: str
        dim_sum: str
        directed_post_attachment: str
        direct_inbox: str
        direct_inbox_reaction: str
        drops_shopping_event_page: str
        dynamic_item_display_bundle: str
        dynamic_item_video: str
        dynamic_template_video: str
        event_cover_video: str
        event_tour: str
        facecast_dvr: str
        fb_avatar_animated_satp: str
        fb_collectible_video: str
        fb_shorts: str
        fb_shorts_content_remixable: str
        fb_shorts_cross_meta_post: str
        fb_shorts_group_post: str
        fb_shorts_linked_product: str
        fb_shorts_pmv_post: str
        fb_shorts_pmv_post_no_newsfeed_nor_timeline: str
        fb_shorts_post: str
        fb_shorts_remix_post: str
        fundraiser_cover_video: str
        game_clip: str
        gemstone: str
        gif_to_video: str
        goodwill_anniversary_deprecated: str
        goodwill_anniversary_promotion_deprecated: str
        goodwill_video_contained_share: str
        goodwill_video_promotion: str
        goodwill_video_share: str
        goodwill_video_token_required: str
        group_post: str
        hack_tv: str
        heuristic_cluster_video: str
        highlight_clip_video: str
        huddle_broadcast: str
        ig_reels_xpv: str
        ig_stories_reader: str
        injectable: str
        inspiration_video: str
        instagram_video_copy: str
        instant_application_preview: str
        instant_article: str
        instant_games_promo: str
        instant_game_clip: str
        issue_module: str
        jobs_careers: str
        jobs_visual_intro_entry: str
        job_application_video: str
        job_opening_video: str
        learn: str
        legacy: str
        legacy_contained_post_broadcast: str
        live_audio_room_broadcast: str
        live_clip_preview: str
        live_clip_workchat: str
        live_creative_kit_video: str
        live_photo: str
        look_now_deprecated: str
        marketplace_listing_video: str
        marketplace_pre_recorded_video: str
        messenger_watch_together: str
        moments_video: str
        music_clip: str
        music_clip_in_audio_digest: str
        music_clip_in_comment: str
        music_clip_in_lightweight_status: str
        music_clip_in_msgr_note: str
        music_clip_in_poll_option: str
        music_clip_on_dating_profile: str
        neo_async_game_video: str
        new_contained_post_broadcast: str
        no_story: str
        no_story_with_entpost: str
        npe_collab_copyright_check: str
        oculus_creator_portal: str
        oculus_venues_broadcast: str
        offers_video: str
        pages_cover_video: str
        page_review_screencast: str
        page_slideshow_video: str
        paid_content_preview: str
        paid_content_video: str
        paid_content_video__post: str
        paper_document_audio: str
        paper_document_video: str
        pixelcloud: str
        podcast_highlight: str
        podcast_ml_preview: str
        podcast_ml_preview_no_newsfeed_story: str
        podcast_rss: str
        podcast_rss_ephemeral: str
        podcast_rss_no_newsfeed_story: str
        podcast_voices: str
        podcast_voices_no_newsfeed_story: str
        premiere_source: str
        premium_music_video_clip: str
        premium_music_video_cropped_clip: str
        premium_music_video_no_newsfeed_story: str
        premium_music_video_with_newsfeed_story: str
        private_gallery_video: str
        product_video: str
        profile_cover_video: str
        profile_intro_card: str
        profile_video: str
        proton: str
        quick_clip_workplace_post: str
        quick_promotion: str
        replace_video: str
        sales_client_interaction: str
        say_thanks_deprecated: str
        showreel_native_dummy_video: str
        slideshow_animoto: str
        slideshow_shakr: str
        slideshow_variation_video: str
        soundbites_video: str
        sound_platform_stream: str
        srt_attachment: str
        stories_video: str
        stories_wearable: str
        storyline: str
        storyline_with_external_music: str
        story_archive_video: str
        story_card_template: str
        stream_highlights_video: str
        tarot_digest: str
        temporary_unlisted: str
        temp_multimedia_post: str
        unlisted: str
        unlisted_horizon: str
        unlisted_oculus: str
        video_comment: str
        video_composition_variation: str
        video_creative_editor_autogen_ad_video: str
        video_superres: str
        voices_article_video: str
        vu_generated_video: str
        woodhenge: str
        work_knowledge_video: str
        your_day: str
    class ContentCategory:
        beauty_fashion: str
        business: str
        cars_trucks: str
        comedy: str
        cute_animals: str
        entertainment: str
        family: str
        food_health: str
        home: str
        lifestyle: str
        music: str
        news: str
        other: str
        politics: str
        science: str
        sports: str
        technology: str
        video_gaming: str
    class Formatting:
        markdown: str
        plaintext: str
    class OriginalProjectionType:
        cubemap: str
        equirectangular: str
        half_equirectangular: str
    class SwapMode:
        replace: str
    class UnpublishedContentType:
        ads_post: str
        draft: str
        inline_created: str
        published: str
        reviewable_branded_content: str
        scheduled: str
        scheduled_recurring: str
    class UploadPhase:
        cancel: str
        finish: str
        start: str
        transfer: str
    class ValidationAdPlacements:
        audience_network_instream_video: str
        audience_network_instream_video_mobile: str
        audience_network_rewarded_video: str
        desktop_feed_standard: str
        facebook_story_mobile: str
        facebook_story_sticker_mobile: str
        instagram_standard: str
        instagram_story: str
        instant_article_standard: str
        instream_banner_desktop: str
        instream_banner_mobile: str
        instream_video_desktop: str
        instream_video_image: str
        instream_video_mobile: str
        messenger_mobile_inbox_media: str
        messenger_mobile_story_media: str
        mobile_feed_standard: str
        mobile_fullwidth: str
        mobile_interstitial: str
        mobile_medium_rectangle: str
        mobile_native: str
        right_column_standard: str
        suggested_video_mobile: str
    class Type:
        tagged: str
        uploaded: str
    class VideoState:
        draft: str
        published: str
        scheduled: str
    class BackdatedTimeGranularity:
        day: str
        hour: str
        min: str
        month: str
        none: str
        year: str
    @classmethod
    def get_endpoint(cls): ...
    def api_create(self, parent_id, fields: Incomplete | None = None, params: Incomplete | None = None, batch: Incomplete | None = None, success: Incomplete | None = None, failure: Incomplete | None = None, pending: bool = False): ...
    def api_delete(self, fields: Incomplete | None = None, params: Incomplete | None = None, batch: Incomplete | None = None, success: Incomplete | None = None, failure: Incomplete | None = None, pending: bool = False): ...
    def api_get(self, fields: Incomplete | None = None, params: Incomplete | None = None, batch: Incomplete | None = None, success: Incomplete | None = None, failure: Incomplete | None = None, pending: bool = False): ...
    def api_update(self, fields: Incomplete | None = None, params: Incomplete | None = None, batch: Incomplete | None = None, success: Incomplete | None = None, failure: Incomplete | None = None, pending: bool = False): ...
    def get_captions(self, fields: Incomplete | None = None, params: Incomplete | None = None, batch: Incomplete | None = None, success: Incomplete | None = None, failure: Incomplete | None = None, pending: bool = False): ...
    def create_caption(self, fields: Incomplete | None = None, params: Incomplete | None = None, batch: Incomplete | None = None, success: Incomplete | None = None, failure: Incomplete | None = None, pending: bool = False): ...
    def get_collaborators(self, fields: Incomplete | None = None, params: Incomplete | None = None, batch: Incomplete | None = None, success: Incomplete | None = None, failure: Incomplete | None = None, pending: bool = False): ...
    def create_collaborator(self, fields: Incomplete | None = None, params: Incomplete | None = None, batch: Incomplete | None = None, success: Incomplete | None = None, failure: Incomplete | None = None, pending: bool = False): ...
    def get_comments(self, fields: Incomplete | None = None, params: Incomplete | None = None, batch: Incomplete | None = None, success: Incomplete | None = None, failure: Incomplete | None = None, pending: bool = False): ...
    def create_comment(self, fields: Incomplete | None = None, params: Incomplete | None = None, batch: Incomplete | None = None, success: Incomplete | None = None, failure: Incomplete | None = None, pending: bool = False): ...
    def get_crosspost_share_d_pages(self, fields: Incomplete | None = None, params: Incomplete | None = None, batch: Incomplete | None = None, success: Incomplete | None = None, failure: Incomplete | None = None, pending: bool = False): ...
    def create_gaming_clip_create(self, fields: Incomplete | None = None, params: Incomplete | None = None, batch: Incomplete | None = None, success: Incomplete | None = None, failure: Incomplete | None = None, pending: bool = False): ...
    def get_likes(self, fields: Incomplete | None = None, params: Incomplete | None = None, batch: Incomplete | None = None, success: Incomplete | None = None, failure: Incomplete | None = None, pending: bool = False): ...
    def create_like(self, fields: Incomplete | None = None, params: Incomplete | None = None, batch: Incomplete | None = None, success: Incomplete | None = None, failure: Incomplete | None = None, pending: bool = False): ...
    def get_poll_settings(self, fields: Incomplete | None = None, params: Incomplete | None = None, batch: Incomplete | None = None, success: Incomplete | None = None, failure: Incomplete | None = None, pending: bool = False): ...
    def get_polls(self, fields: Incomplete | None = None, params: Incomplete | None = None, batch: Incomplete | None = None, success: Incomplete | None = None, failure: Incomplete | None = None, pending: bool = False): ...
    def create_poll(self, fields: Incomplete | None = None, params: Incomplete | None = None, batch: Incomplete | None = None, success: Incomplete | None = None, failure: Incomplete | None = None, pending: bool = False): ...
    def get_sponsor_tags(self, fields: Incomplete | None = None, params: Incomplete | None = None, batch: Incomplete | None = None, success: Incomplete | None = None, failure: Incomplete | None = None, pending: bool = False): ...
    def get_tags(self, fields: Incomplete | None = None, params: Incomplete | None = None, batch: Incomplete | None = None, success: Incomplete | None = None, failure: Incomplete | None = None, pending: bool = False): ...
    def create_tag(self, fields: Incomplete | None = None, params: Incomplete | None = None, batch: Incomplete | None = None, success: Incomplete | None = None, failure: Incomplete | None = None, pending: bool = False): ...
    def get_thumbnails(self, fields: Incomplete | None = None, params: Incomplete | None = None, batch: Incomplete | None = None, success: Incomplete | None = None, failure: Incomplete | None = None, pending: bool = False): ...
    def create_thumbnail(self, fields: Incomplete | None = None, params: Incomplete | None = None, batch: Incomplete | None = None, success: Incomplete | None = None, failure: Incomplete | None = None, pending: bool = False): ...
    def get_video_insights(self, fields: Incomplete | None = None, params: Incomplete | None = None, batch: Incomplete | None = None, success: Incomplete | None = None, failure: Incomplete | None = None, pending: bool = False): ...
    def remote_create(self, batch: Incomplete | None = None, failure: Incomplete | None = None, params: Incomplete | None = None, success: Incomplete | None = None): ...
    def waitUntilEncodingReady(self, interval: int = 30, timeout: int = 600) -> None: ...
