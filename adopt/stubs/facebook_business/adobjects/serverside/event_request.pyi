from _typeshed import Incomplete
from facebook_business import FacebookAdsApi as FacebookAdsApi
from facebook_business.adobjects.adspixel import AdsPixel as AdsPixel
from facebook_business.adobjects.serverside.event import Event as Event
from facebook_business.adobjects.serverside.event_response import EventResponse as EventResponse
from facebook_business.adobjects.serverside.http_method import HttpMethod as HttpMethod
from facebook_business.adobjects.serverside.request_options import RequestOptions as RequestOptions
from facebook_business.adobjects.serverside.util import Util as Util
from facebook_business.session import FacebookSession as FacebookSession

class EventRequest:
    param_types: Incomplete
    def __init__(self, pixel_id: Incomplete | None = None, events: Incomplete | None = None, test_event_code: Incomplete | None = None, namespace_id: Incomplete | None = None, upload_id: Incomplete | None = None, upload_tag: Incomplete | None = None, upload_source: Incomplete | None = None, partner_agent: Incomplete | None = None, http_client: Incomplete | None = None, access_token: Incomplete | None = None, appsecret: Incomplete | None = None) -> None: ...
    @property
    def events(self): ...
    @events.setter
    def events(self, events) -> None: ...
    @property
    def test_event_code(self): ...
    @test_event_code.setter
    def test_event_code(self, test_event_code) -> None: ...
    @property
    def namespace_id(self): ...
    @namespace_id.setter
    def namespace_id(self, namespace_id) -> None: ...
    @property
    def upload_id(self): ...
    @upload_id.setter
    def upload_id(self, upload_id) -> None: ...
    @property
    def upload_tag(self): ...
    @upload_tag.setter
    def upload_tag(self, upload_tag) -> None: ...
    @property
    def upload_source(self): ...
    @upload_source.setter
    def upload_source(self, upload_source) -> None: ...
    @property
    def partner_agent(self): ...
    @partner_agent.setter
    def partner_agent(self, partner_agent) -> None: ...
    def get_request_params(self): ...
    def get_params(self): ...
    def execute(self): ...
    def execute_with_client(self, params): ...
    def normalize(self): ...
    def to_dict(self): ...
    def to_str(self): ...
    def __eq__(self, other): ...
    def __ne__(self, other): ...
